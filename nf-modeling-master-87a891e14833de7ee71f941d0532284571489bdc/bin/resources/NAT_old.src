/************************************************************************************
 *																					*
 *     Copyright notice: please read file license.txt in the project root folder.    *
 *                                              								        *
 ************************************************************************************/

/**
 * \file Application.java
 *
 * \author Luca Capano
 * \author Ivano Cerrato
 *
 */

package NAT;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArrayList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;

import org.apache.felix.http.jetty.internal.JettyConfig;
import org.osgi.framework.BundleContext;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import frog.export.interfaceManager.*;
import frog.export.packetDispatcher.*;
import frog.export.protocols.EtherType;
import frog.export.protocols.Ethernet;
import frog.export.protocols.ICMP;
import frog.export.protocols.IPv4;
import frog.export.protocols.MACAddress;
import frog.export.protocols.TransportLayerProtocol;
import frog.export.protocols.UDP;
import frog.export.protocols.tcp.TCP;
import frog.export.log.*;
import frog.export.managementServlet.*;

/*
 * @Author Cannata Matteo
 /*
 * This class represents the skeleton of an application for the PEX.
 * The name of the application must be specified into the files
 * 
 * 		META-INF/MANIFEST.MF
 */
public class NATApplication implements PexApplicationWithPSService, Runnable {

	JettyConfig j;
	private long time = 0;
	private int CLEAR_TIME = 300;
	private String PathOfInterface;
	private String PathOfInterfaceXSD;
	private MACAddress MACbrodcast_domain_1;
	private int netmaskbrodcast_domain_1;
	private int IPbrodcast_domain_1;
	private MACAddress MACbrodcast_domain_2;
	static public int WAN_IP;
	public static Hashtable<Integer, Hashtable<Integer, List<Connession_descriptor>>> NatTable;

	/*
	 * This object represents the module of the PEX that dispatches packets to
	 * applications.
	 */
	protected PacketDispatcher packetDispatcher;

	/*
	 * This object represents the module of the PEX that allows the application
	 * to interact with the Remote STOrage service (RESTO). Currently the RESTO
	 * is not supported.
	 */

	/*
	 * This object represents the module of the PEX that virtualizes physical
	 * interfaces of the FROG to the application.
	 */
	protected InterfaceManager interfaceManager;

	/*
	 * This object represents the module of the PEX that can be used to log
	 * information.
	 */
	protected Logger logger;

	/*
	 * This object contains the identifier of the application within the PEX.
	 * The application must use it to authenticate itself when it asks for some
	 * service to the PEX.
	 */
	private ApplicationID id;

	private final String MODULE_NAME = NATActivator.MODULE_NAME;

	/*
	 * This method is called when the application must be started.
	 */
	public boolean startUp(BundleContext bundleContext) {
		logger.log(Levels.PEX_INFO, MODULE_NAME, "starting up...");
		id = packetDispatcher.GetID(this);
		NatTable = new Hashtable<Integer, Hashtable<Integer, List<Connession_descriptor>>>();

		try {

			File xmlfile2 = new File(PathOfInterface);

			SchemaFactory sf2 = SchemaFactory
					.newInstance(javax.xml.XMLConstants.W3C_XML_SCHEMA_NS_URI);
			Schema schema2 = null;

			logger.log(Levels.PEX_INFO, MODULE_NAME,
					"validating config file...");
			schema2 = sf2.newSchema(new File(PathOfInterfaceXSD));
			Source xmlfile_source2 = new StreamSource(xmlfile2);
			Validator validator2 = schema2.newValidator();
			validator2.validate(xmlfile_source2);

			DocumentBuilderFactory dbf2 = DocumentBuilderFactory.newInstance();
			DocumentBuilder db2 = dbf2.newDocumentBuilder();
			db2 = dbf2.newDocumentBuilder();
			db2.setErrorHandler(null);
			File file2 = new File(PathOfInterface);
			Document document2 = db2.parse(file2);

			NodeList interfaces = document2.getElementsByTagName("vinterface");

			for (int i = 0; i < interfaces.getLength(); i++) {

				Element node = (Element) interfaces.item(i);

				if (node.getAttribute("broadcast_domain").equals("1")) {
					MACbrodcast_domain_1 = MACAddress.valueOf(node
							.getAttribute("mac"));
					IPbrodcast_domain_1 = IPv4.toIPv4Address(node
							.getAttribute("ip"));
					netmaskbrodcast_domain_1 = IPv4.toIPv4Address(node
							.getAttribute("netmask"));

				}

				if (node.getAttribute("broadcast_domain").equals("2")) {

					MACbrodcast_domain_2 = MACAddress.valueOf(node
							.getAttribute("mac"));
					WAN_IP = IPv4.toIPv4Address(node.getAttribute("ip"));

				}

			}

			ArrayList<String> l = new ArrayList<String>();
			l.add(QueryParam.WAN_IP);
			String mess = ManagementServlet.RegisterPEX(l);
			logger.log(Levels.PEX_INFO, MODULE_NAME, mess + "\n");

			if (mess == null) {
				logger.log(Levels.PEX_INFO, MODULE_NAME,
						"the Central Servlet is off");
			}

		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		packetDispatcher.RegisterApplication(id);
		logger.log(Levels.PEX_INFO, MODULE_NAME, "startup finished.");

		Thread thread = new Thread(this);
		thread.start();
		return true;

	}

	/*
	 * This method is called when the application must be stopped.
	 */
	public void shutDown() {
		logger.log(Levels.PEX_INFO, MODULE_NAME, "shutdown.");
		packetDispatcher.RemoveApplication(id);
	}

	/*
	 * This is the 'main' method of the application. In fact, it is the method
	 * invoked by the PEX in order to provide packets to the application. Note
	 * that this method receives a packet at a time.
	 * 
	 * \param pkt The packet which the application can manage
	 * 
	 * \param direction An enumeration value that represent the flux direction
	 * of the packet
	 * 
	 * \param input_interface The input interface of the packet just received
	 * 
	 * \param out_interfaces An object reference representing the list of output
	 * interfaces for the current packet.
	 * 
	 * \return CONTINUE if the packet can continue on its way, DROP if the
	 * packet must be dropped
	 */

	public void ReceivedInfo(Hashtable<String, String> hashTable) {

		if (hashTable != null) {

			logger.log(Levels.PEX_INFO, MODULE_NAME,
					" the return value is  " + QueryParam.WAN_IP + " "
							+ hashTable.get(QueryParam.WAN_IP));
			NATApplication nat = new NATApplication();

			if (hashTable.containsKey(QueryParam.WAN_IP) == true
					&& hashTable.get(QueryParam.WAN_IP) != null)
				synchronized (NatTable) {
					nat.WAN_IP = IPv4.toIPv4Address(hashTable
							.get(QueryParam.WAN_IP));
					/* nat.NatTable.clear();*/

				}
		}

	}

	@Override
	public Application_exit_status OnReceivedPacket(Packet packet,
			Direction direction, short inputInterface,
			OUTInterfaces outputInterface) {
		/* time = System.nanoTime();*/

		synchronized (NatTable) {

			byte[] packetData = packet.getPKT();
			Ethernet eth = new Ethernet(packet);

			if (eth.isBroadcast())
				return Application_exit_status.CONTINUE;

			if (eth.getEtherType() == EtherType.IPv4) {
				IPv4 ipv4 = new IPv4();
				ipv4 = (IPv4) eth.getPayload();

				/* don't nat packet into the lan*/
				if (((IPbrodcast_domain_1 & netmaskbrodcast_domain_1) == (ipv4
						.getDestinationAddress() & netmaskbrodcast_domain_1)))
					return Application_exit_status.CONTINUE;

				if (eth.getDestinationMAC().toLong() == (MACbrodcast_domain_1
						.toLong())) {

					/*
					 * BRODCAST DOMAIN 1 this IF clause analize packet direct to
					 * Internet
					 */

					TCP tcp = null;
					UDP udp = null;

					if (ipv4.getProtocol() == TransportLayerProtocol.UDP) {
						udp = (UDP) ipv4.getPayload();

					}

					if (ipv4.getProtocol() == TransportLayerProtocol.TCP) {
						tcp = (TCP) ipv4.getPayload();

					}

					int value = Analize_packet_OUT(ipv4, packet);

					if (value == -1) {
						/* All port used, clear table and retry*/
						NatTable.clear();
						return Application_exit_status.DROP;

					} else {

						/* Replace source ip of packet*/
						ipv4.setSourceAddress(WAN_IP);

						if (ipv4.getProtocol() == TransportLayerProtocol.TCP) {

							tcp.resetChecksum();
							ipv4.setPayload(tcp);

						}

						if (ipv4.getProtocol() == TransportLayerProtocol.UDP) {

							udp.resetChecksum();
							ipv4.setPayload(udp);

						}

						ipv4.resetChecksum();
						eth.resetChecksum();
						eth.setPayload(ipv4);

						byte[] temp = eth.serialize();
						System.arraycopy(temp, 0, packetData, 0, temp.length);
						/*return Application_exit_status.CONTINUE;*/
					}

				} else {

					/*
					 * BRODCAST DOMAIN 2 this ELSE clause analizes packet from
					 * Internet
					 */

					if (eth.getDestinationMAC().toLong() == (MACbrodcast_domain_2
							.toLong())) {

						TCP tcp = null;
						UDP udp = null;
						ICMP icmp = null;
						boolean found = false;

						if (NatTable.containsKey(ipv4.getSourceAddress()) == true) {

							Collection<List<Connession_descriptor>> c = NatTable
									.get(ipv4.getSourceAddress()).values();

							for (List<Connession_descriptor> l : c) {

								for (Connession_descriptor cd : l) {

									if (cd.get_IPd() == ipv4.getSourceAddress()) {

										if (ipv4.getProtocol() == TransportLayerProtocol.TCP) {
											tcp = (TCP) ipv4.getPayload();
											if (cd.get_Pd() == tcp
													.getSourcePort()
													&& (cd.get_Ps() == tcp
													.getDestinationPort())) {


											} else {

												if (cd.get_Pd() == tcp
														.getSourcePort()
														&& (cd.get_Ps_mapped() == tcp
														.getDestinationPort())) {
												} else {

													continue;

												}
											}

										}

										if (ipv4.getProtocol() == TransportLayerProtocol.UDP) {

											udp = (UDP) ipv4.getPayload();
											if (cd.get_Pd() == udp
													.getSourcePort()
													&& (cd.get_Ps() == udp
													.getDestinationPort())) {

											} else {
												if (cd.get_Pd() == udp
														.getSourcePort()
														&& cd.get_Ps_mapped() == udp
														.getDestinationPort()) {

												} else {
													continue;
												}

											}

										}

										if (ipv4.getProtocol() == TransportLayerProtocol.ICMP) {
											icmp = (ICMP) ipv4.getPayload();

											if (cd.get_ICMP_ID() == icmp
													.getIcmpCode()) {

											} else {

												continue;

											}

										}

										ipv4.setDestinationAddress(cd.get_IPs());

										if (ipv4.getProtocol() == TransportLayerProtocol.TCP) {

											tcp.setDestinationPort(cd.get_Ps());

										}

										if (ipv4.getProtocol() == TransportLayerProtocol.UDP) {

											udp.setDestinationPort(cd.get_Ps());
										}

										ipv4.resetChecksum();

										if (ipv4.getProtocol() == TransportLayerProtocol.TCP) {
											tcp.resetChecksum();
										}
										if (ipv4.getProtocol() == TransportLayerProtocol.UDP) {
											udp.resetChecksum();
										}

										eth.resetChecksum();
										byte[] temp2 = eth.serialize();
										System.arraycopy(temp2, 0, packetData,
												0, temp2.length);

										found = true;
										break;

									}

								} 

								if (found == true)
									break;

							}

						} else {
							return Application_exit_status.DROP;

						}

					}

				}

			}

			return Application_exit_status.CONTINUE;
		}

	}

	public int Analize_packet_OUT(IPv4 ipv4, Packet packet) {

		TransportLayerProtocol tlp = ipv4.getProtocol();

		switch (tlp.name()) {

		case "TCP":

			TCP tcp = new TCP();
			tcp = (TCP) ipv4.getPayload();

			if (NatTable.containsKey(ipv4.getDestinationAddress()) == true
					&& NatTable.get(ipv4.getDestinationAddress()) != null) {

				Hashtable<Integer, List<Connession_descriptor>> temp = NatTable
						.get(ipv4.getDestinationAddress());
				Connession_descriptor cd = new Connession_descriptor(
						ipv4.getDestinationAddress(), ipv4.getSourceAddress(),
						tcp.getSourcePort(), tcp.getDestinationPort(), "TCP");

				if (temp.containsKey(ipv4.getSourceAddress()) == true) {

					boolean flag = false; 
					boolean same_port = false;

					Collection<List<Connession_descriptor>> collection = temp
							.values();

					for (List<Connession_descriptor> l : collection) {

						for (Connession_descriptor descriptor : l) {

							if (descriptor.get_IPs() == ipv4.getSourceAddress()
									&& descriptor.get_IPd() == ipv4
									.getDestinationAddress()
									&& descriptor.get_Pd() == tcp
									.getDestinationPort()
									&& descriptor.get_Ps() == tcp
									.getSourcePort()) {

								if (descriptor.get_Ps_mapped() != 0) {
									flag = true;
									same_port = false;
									tcp.setSourcePort(descriptor
											.get_Ps_mapped());
									descriptor.set_time(System
											.currentTimeMillis() / 1000);
									break;

								} else {

									flag = true;
									same_port = false;
									descriptor.set_time(System
											.currentTimeMillis() / 1000);
									break;

								}

							}

							if (flag == false
									&& descriptor.get_IPs() != ipv4
									.getSourceAddress()
									&& descriptor.get_IPd() == ipv4
									.getDestinationAddress()
									&& descriptor.get_Pd() == tcp
									.getDestinationPort()
									&& descriptor.get_Ps() == tcp
									.getSourcePort()) {

								same_port = true;
								descriptor
								.set_time(System.currentTimeMillis() / 1000);

								break;

							}

						}

					}

					if (flag == true) {


					} else {

						if (same_port == true) {
							List<Connession_descriptor> t = temp.get(ipv4
									.getSourceAddress());
							short value = 0;
							tcp.setSourcePort(value = cd.assigned_other_port());
							if (value == 0)
								return -1; 
							cd.set_time(System.currentTimeMillis() / 1000);
							t.add(cd);

						} else {
							List<Connession_descriptor> t = temp.get(ipv4
									.getSourceAddress());
							cd.set_time(System.currentTimeMillis() / 1000);
							t.add(cd);

						}
					}

				} else {
					List<Connession_descriptor> l = new CopyOnWriteArrayList<Connession_descriptor>();
					cd.set_time(System.currentTimeMillis() / 1000);
					l.add(cd);
					temp.put(ipv4.getSourceAddress(), l);

				}

			} else {

				List<Connession_descriptor> l = new CopyOnWriteArrayList();
				Connession_descriptor cd = new Connession_descriptor(
						ipv4.getDestinationAddress(), ipv4.getSourceAddress(),
						tcp.getSourcePort(), tcp.getDestinationPort(), "TCP");
				cd.set_time(System.currentTimeMillis() / 1000);
				l.add(cd);
				Hashtable<Integer, List<Connession_descriptor>> h = new Hashtable<Integer, List<Connession_descriptor>>();
				h.put(ipv4.getSourceAddress(), l);

				NatTable.put(ipv4.getDestinationAddress(), h);

			}

			break;

		case "UDP":

			UDP udp = new UDP();
			udp = (UDP) ipv4.getPayload();

			if (NatTable.containsKey(ipv4.getDestinationAddress()) == true
					&& NatTable.get(ipv4.getDestinationAddress()) != null) {

				Hashtable<Integer, List<Connession_descriptor>> temp = NatTable
						.get(ipv4.getDestinationAddress());
				Connession_descriptor cd = new Connession_descriptor(
						ipv4.getDestinationAddress(), ipv4.getSourceAddress(),
						udp.getSourcePort(), udp.getDestinationPort(), "UDP");

				if (temp.containsKey(ipv4.getSourceAddress()) == true) {

					boolean flag = false; 
					boolean same_port = false;

					Collection<List<Connession_descriptor>> collection = temp
							.values();

					for (List<Connession_descriptor> l : collection) {

						for (Connession_descriptor descriptor : l) {
							if (descriptor.get_IPs() == ipv4.getSourceAddress()
									&& descriptor.get_IPd() == ipv4
									.getDestinationAddress()
									&& descriptor.get_Pd() == udp
									.getDestinationPort()
									&& descriptor.get_Ps() == udp
									.getSourcePort()) {

								if (descriptor.get_Ps_mapped() != 0) {
									flag = true;
									same_port = false;
									udp.setSourcePort(descriptor
											.get_Ps_mapped());
									descriptor.set_time(System
											.currentTimeMillis() / 1000);
									break;

								} else {
									flag = true;
									same_port = false;
									descriptor.set_time(System
											.currentTimeMillis() / 1000);
									break;

								}

							}

							if (flag == false
									&& descriptor.get_IPs() != ipv4
									.getSourceAddress()
									&& descriptor.get_IPd() == ipv4
									.getDestinationAddress()
									&& descriptor.get_Pd() == udp
									.getDestinationPort()
									&& descriptor.get_Ps() == udp
									.getSourcePort()) {

								same_port = true;
								descriptor
								.set_time(System.currentTimeMillis() / 1000);
								break;

							}

						}

					}

					if (flag == true) {

					} else {

						if (same_port == true) {
							List<Connession_descriptor> t = temp.get(ipv4
									.getSourceAddress());
							short value = 0;
							udp.setSourcePort(value = cd.assigned_other_port());
							if (value == 0)
								return -1; 
							cd.set_time(System.currentTimeMillis() / 1000);
							t.add(cd);

						} else {
							List<Connession_descriptor> t = temp.get(ipv4
									.getSourceAddress());
							cd.set_time(System.currentTimeMillis() / 1000);
							t.add(cd);

						}
					}

				} else {
					List<Connession_descriptor> l = new CopyOnWriteArrayList<Connession_descriptor>();
					cd.set_time(System.currentTimeMillis() / 1000);
					l.add(cd);
					temp.put(ipv4.getSourceAddress(), l);
				}

			} else {
				List<Connession_descriptor> l = new CopyOnWriteArrayList();
				Connession_descriptor cd = new Connession_descriptor(
						ipv4.getDestinationAddress(), ipv4.getSourceAddress(),
						udp.getSourcePort(), udp.getDestinationPort(), "UDP");
				cd.set_time(System.currentTimeMillis() / 1000);
				l.add(cd);
				Hashtable<Integer, List<Connession_descriptor>> h = new Hashtable<Integer, List<Connession_descriptor>>();
				h.put(ipv4.getSourceAddress(), l);
				NatTable.put(ipv4.getDestinationAddress(), h);

			}

			break;

		case "ICMP":

			ICMP icmp = new ICMP();
			icmp = (ICMP) ipv4.getPayload();

			if (NatTable.containsKey(ipv4.getDestinationAddress()) == true
					&& NatTable.get(ipv4.getDestinationAddress()) != null) {

				Hashtable<Integer, List<Connession_descriptor>> temp = NatTable
						.get(ipv4.getDestinationAddress());
				Connession_descriptor cd = new Connession_descriptor(
						ipv4.getDestinationAddress(), ipv4.getSourceAddress(),
						icmp.getIcmpCode(), "ICMP");

				if (temp.containsKey(ipv4.getSourceAddress()) == true) {

					List<Connession_descriptor> l = temp.get(ipv4
							.getSourceAddress());

					boolean flag = false;

					for (Connession_descriptor c_des : l) {

						if (c_des.get_IPs() == ipv4.getSourceAddress()
								&& c_des.get_IPd() == ipv4
								.getDestinationAddress()
								&& c_des.get_ICMP_ID() == icmp.getIcmpCode()) {
							c_des.set_time(System.currentTimeMillis() / 1000);
							flag = true;
							break;

						}

					}

					if (flag == true) {

					} else {
						List<Connession_descriptor> t = temp.get(ipv4
								.getSourceAddress());
						cd.set_time(System.currentTimeMillis() / 1000);
						t.add(cd);

					}

				} else {
					List<Connession_descriptor> l = new CopyOnWriteArrayList<Connession_descriptor>();
					cd.set_time(System.currentTimeMillis() / 1000);
					l.add(cd);
					temp.put(ipv4.getSourceAddress(), l);
				}

			} else {

				List<Connession_descriptor> l = new CopyOnWriteArrayList();
				Connession_descriptor cd = new Connession_descriptor(
						ipv4.getDestinationAddress(), ipv4.getSourceAddress(),
						icmp.getIcmpCode(), "ICMP");
				cd.set_time(System.currentTimeMillis() / 1000);
				l.add(cd);
				Hashtable<Integer, List<Connession_descriptor>> h = new Hashtable<Integer, List<Connession_descriptor>>();
				h.put(ipv4.getSourceAddress(), l);

				NatTable.put(ipv4.getDestinationAddress(), h);

			}

			break;

		}

		return 0;

	}

	public void setPacketDispatcher(PacketDispatcher packetDispatcher) {
		this.packetDispatcher = packetDispatcher;
	}

	public void setInterfaceManager(InterfaceManager interfaceManager) {
		this.interfaceManager = interfaceManager;
	}

	public void setLogger(Logger logger) {
		this.logger = logger;
	}

	public void setPath(String conf, String schema, String cs, String time) {

		PathOfInterface = conf;
		PathOfInterfaceXSD = schema;
		try {

			if (Integer.parseInt(time) > 0)
				CLEAR_TIME = Integer.parseInt(time);

		} catch (NumberFormatException e) {

			CLEAR_TIME = 360;

		}

	}

	public static long getUnsignedShort(int x) {
		return x & (-1L >>> 48);
	}

	@Override
	public void run() {

		while (true) {

			try {

				Thread.sleep(CLEAR_TIME * 1000);

			} catch (InterruptedException e) {
				e.printStackTrace();
			}

			synchronized (NatTable) {
				int count = 0;
				time = System.nanoTime();

				Set<Integer> dest_list = NatTable.keySet();

				for (Integer destination : dest_list) {

					Hashtable<Integer, List<Connession_descriptor>> source_table = NatTable
							.get(destination);
					Collection<List<Connession_descriptor>> CD_collection = source_table
							.values();

					for (List<Connession_descriptor> Cd_list : CD_collection) {

						for (Connession_descriptor CD : Cd_list) {
							if (((System.currentTimeMillis() / 1000) - CD
									.get_time()) > CLEAR_TIME) {
								count++;
								if (CD.get_Ps_mapped() != 0) {

									for (Integer i : CD.assigned_port) {
										if (i.intValue() == getUnsignedShort(CD
												.get_Ps_mapped())) {
											CD.assigned_port.remove(i);
											logger.log(
													Levels.PEX_DEBUG,
													MODULE_NAME,
													"porta rimossa mappata"
															+ getUnsignedShort(CD
																	.get_Ps_mapped()));
										}

									}
								}
								Cd_list.remove(CD);
								if (Cd_list.isEmpty() == true) {

									int address = CD.get_IPs();
									source_table.remove(address);
								}

							}

						}

					}

					if (NatTable.get(destination) == null) {
						NatTable.remove(destination);
					}

				}

				long total2 = (System.nanoTime() - time);
				logger.log(Levels.PEX_INFO, MODULE_NAME, "CD removed " + count);
				logger.log(Levels.PEX_INFO, MODULE_NAME, "time into lock "
						+ total2);

			}

		}

	}

}
