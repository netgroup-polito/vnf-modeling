package resources;

import java.net.URL;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import it.polito.nfdev.lib.Interface;
import it.polito.nfdev.lib.NetworkFunction;
import it.polito.nfdev.lib.Packet;
import it.polito.nfdev.lib.Packet.PacketField;
import it.polito.nfdev.lib.RoutingResult.Action;
import it.polito.nfdev.verification.Verifier;
import it.polito.nfdev.verification.Expression;
import it.polito.nfdev.verification.Expression.Operator;
import it.polito.nfdev.verification.Verifier.PacketType;
import it.polito.nfdev.lib.RoutingResult;

public class WebCache extends NetworkFunction {
	
	private Interface internalFace;
	private Interface externalFace;
	private Map<String, Content> cache;
	
	public WebCache(List<Interface> interfaces) {
		super(interfaces);
		assert interfaces.size() == 2;
		internalFace = null;
		externalFace = null;
		for(Interface i : interfaces)
		{
			if(i.getAttributes().contains(Interface.INTERNAL_ATTR))
				internalFace = i;
			if(i.getAttributes().contains(Interface.EXTERNAL_ATTR))
				externalFace = i;
		}
		assert internalFace != null;
		assert externalFace != null;
		assert internalFace.getId() != externalFace.getId();
		cache = new HashMap<String, Content>();
	}

	@Override
	public RoutingResult onReceivedPacket(Packet packet, Interface iface) {
		if(iface.getId().equals(internalFace.getId()) &&
		   packet.getField(PacketField.APPLICATION_PROTOCOL).equals(Packet.HTTP_REQUEST))
		{
			/* Packet coming from the internal network */
			Content content = cache.get(packet.getField(PacketField.L7DATA));
			if(content != null)
			{
				Packet p = null;
				try {
					p = packet.clone();
					p.setField(PacketField.IP_DST, packet.getField(PacketField.IP_SRC));
					p.setField(PacketField.IP_SRC, packet.getField(PacketField.IP_DST));
					p.setField(PacketField.PORT_DST, packet.getField(PacketField.PORT_SRC));
					p.setField(PacketField.PORT_SRC, packet.getField(PacketField.PORT_DST));
					p.setField(PacketField.APPLICATION_PROTOCOL, Packet.HTTP_RESPONSE);
					return new RoutingResult(Action.FORWARD, p, internalFace);
				} catch (CloneNotSupportedException e) {
					e.printStackTrace();
					return new RoutingResult(Action.DROP, null, null);
				}
			}
		}
		else if(iface.getId().equals(externalFace.getId()) &&
				packet.getField(PacketField.APPLICATION_PROTOCOL).equals(Packet.HTTP_RESPONSE))
		{
			/* Packet coming from the external network */
			try {
				Content content = new Content(new URL(packet.getField(PacketField.L7DATA)));
				cache.put(content.getUrl().toString(), content);
				return new RoutingResult(Action.FORWARD, packet, internalFace);
			} catch(Exception ex)
			{
				ex.printStackTrace();
			}
			
		}
		if(iface.getId().equals(internalFace.getId()))
			return new RoutingResult(Action.FORWARD, packet, externalFace);
		else
			return new RoutingResult(Action.FORWARD, packet, internalFace);
	}

}
