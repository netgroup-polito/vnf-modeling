package it.polito.nfdev.nat;

import java.util.Date;
import java.util.List;

import it.polito.nfdev.lib.Interface;
import it.polito.nfdev.lib.NetworkFunction;
import it.polito.nfdev.lib.Packet;
import it.polito.nfdev.lib.Packet.PacketField;
import it.polito.nfdev.lib.RoutingResult.Action;
import it.polito.nfdev.verification.Configuration;
import it.polito.nfdev.verification.Table;
import it.polito.nfdev.verification.Verifier;
import it.polito.nfdev.verification.Verifier.PacketType;
import it.polito.nfdev.verification.Verifier.State.Entry;
import it.polito.nfdev.lib.RoutingResult;

public class Nat extends NetworkFunction {
	
	private final Integer TIMEOUT; // in seconds
	
	@Table(fields = {"INTERNAL_IP", "INTERNAL_PORT", "EXTERNAL_IP", "EXTERNAL_PORT"})
	private NatTable natTable;
	
	private PortPool portPool;
	private Interface internalFace;
	private Interface externalFace;
	@Configuration
	private String natIp;
	
	public Nat(List<Interface> interfaces, String natIp, Integer timeout) {
		super(interfaces);
		assert interfaces.size() == 2;
		assert timeout > 0;
		assert natIp != null && !natIp.isEmpty();
		internalFace = null;
		externalFace = null;
		for(Interface i : interfaces)
		{
			if(i.getAttributes().contains(Interface.INTERNAL_ATTR))
				internalFace = i;
			if(i.getAttributes().contains(Interface.EXTERNAL_ATTR))
				externalFace = i;
		}
		assert internalFace != null;
		assert externalFace != null;
		assert internalFace.getId() != externalFace.getId();
		this.natTable = new NatTable();
		this.natIp = natIp;
		this.portPool = new PortPool(10000, 1024); // starting port, # of ports
		this.TIMEOUT = timeout;
	}

	@Override
	public RoutingResult onReceivedPacket(Packet packet, Interface iface) {
		Packet packet_in = null;
		try {
			packet_in = packet.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
			return new RoutingResult(Action.DROP, null, null); 
		}
		if(iface.getAttributes().contains(Interface.INTERNAL_ATTR))
		{
			// Packet coming from the internal network
			TableEntry entry = natTable.matchInternalIpPort(packet_in.getField(PacketField.IP_SRC), packet_in.getField(PacketField.PORT_SRC));
			if(entry != null)
			{
				// We already have a mapping for this connection
				packet_in.setField(PacketField.IP_SRC, entry.getExternalIp());
				packet_in.setField(PacketField.PORT_SRC, entry.getExternalPort());
				entry.setTimestamp(new Date());
				return new RoutingResult(Action.FORWARD, packet_in, externalFace);
			}
			else
			{
				Integer new_port = portPool.getAvailablePort();
				if(new_port == null)
					return new RoutingResult(Action.DROP, null, null);	// No available ports, discard new connections
				TableEntry e = new TableEntry();
				e.setInternalIp(packet_in.getField(PacketField.IP_SRC));
				e.setInternalPort(packet_in.getField(PacketField.PORT_SRC));
				e.setExternalIp(natIp);
				e.setExternalPort(String.valueOf(new_port));
				e.setTimestamp(new Date());
				packet_in.setField(PacketField.IP_SRC, natIp);
				packet_in.setField(PacketField.PORT_SRC, String.valueOf(new_port));
				
				natTable.addEntry(e);
				return new RoutingResult(Action.FORWARD, packet_in, externalFace);
			}
		}
		else
		{
			// Packet coming from the external network
			TableEntry entry = natTable.matchExternalIpPort(packet_in.getField(PacketField.IP_DST), packet_in.getField(PacketField.PORT_DST));
			if(entry == null)
				return new RoutingResult(Action.DROP, null, null);
			// Here we should implement more checks (paranoid NAT):
			// 	- the packet origin (source ip/port) is the allowed one
			packet_in.setField(PacketField.IP_DST, entry.getInternalIp());
			packet_in.setField(PacketField.PORT_DST, entry.getInternalPort());
			entry.setTimestamp(new Date());
			return new RoutingResult(Action.FORWARD, packet_in, internalFace);
		}
	}
	
	public void reset() {
		this.natTable.clear();
	}
	
	public void checkForTimeout() {
		natTable.checkForTimeout(TIMEOUT);
	}
	
	public void printNatTable() {
		System.out.println(natTable);
	}

}
